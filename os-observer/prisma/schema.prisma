generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Used to track a group of people, who may be producing many artifacts 
model Organization {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  // Human-readable name for the organization
  name        String
  // The GitHub organization slug (e.g "hypercerts-org")
  githubOrg   String? @unique
  // Human-readable description for the organization
  description String?

  // RELATIONS
  // Associated artifacts
  artifacts Artifact[]
}

// A particular piece of work created by an organization
// TODO: if we really want to have separate tables for wallets, repositories, etc, we can turn this into a union type later
//    https://dev.to/reggi/working-with-unions-within-prisma-nm6
model Artifact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  // Relation to the Organization if one exists
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  // The type of artifact
  type      ArtifactType
  // The namespace of `name`
  namespace ArtifactNamespace
  // A unique identifier for this artifact within the namespace
  name      String
  // An optional URL to learn more about this artifact
  url       String?
  // Catch-all for other data we want to store
  details   Json?

  // RELATIONS
  // Associated events
  events          Event[]
  // Associated event source pointers
  eventSourcePtrs EventSourcePointer[]

  // A combination of the type, namespace, and name must be unique
  @@unique([type, namespace, name])
}

// Represents someone that is associated with an event
// e.g. a source of funding, a code contributor, etc.
model Contributor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  // Currently just an arbitrary string
  name      String
  namespace ContributorNamespace
  // TODO add more fields as necessary

  // RELATIONS
  // Associated events
  events Event[]
}

// An event that happened to an artifact
// An event stream is identified by its (organization, artifact, eventType)
model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  // Relation to the Artifact
  artifact      Artifact     @relation(fields: [artifactId], references: [id])
  artifactId    Int
  // Type of event
  eventType     EventType
  // Time the event happened
  eventTime     DateTime     @db.Timestamptz(3)
  // Who is the source of the event?
  // Relation to the Contributor
  contributor   Contributor? @relation(fields: [contributorId], references: [id])
  contributorId Int?
  // Depending on the event type, this may reflect some count or amount
  amount        Float
  // Catch-all for other data we want to store with the event
  details       Json?
}

model EventSourcePointer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  // Relation to the Artifact
  artifact   Artifact  @relation(fields: [artifactId], references: [id])
  artifactId Int
  // Type of event
  eventType  EventType

  // Used to run a command to get data
  queryCommand String
  // Arguments to the query command
  queryArgs    Json
  // The relevant pointer information on where we left off
  pointer      Json
  // Should the we auto-crawl this source?
  autocrawl    Boolean?

  // This tuple must be unique!
  @@unique([artifactId, eventType])
}

enum EventType {
  // Financing events
  FUNDING
  // Source code management events
  PULL_REQUEST_CREATED
  PULL_REQUEST_MERGED
  COMMIT_CODE
  // Project management events
  ISSUE_FILED
  ISSUE_CLOSED
  // Software dependency events
  DOWNSTREAM_DEPENDENCY_COUNT
  UPSTREAM_DEPENDENCY_COUNT
  DOWNLOADS
  // Usage events
  CONTRACT_INVOKED
  USERS_INTERACTED
}

enum ArtifactType {
  // On-chain artifacts
  EOA_ADDRESS
  SAFE_ADDRESS
  CONTRACT_ADDRESS
  // Software artifacts
  GIT_REPOSITORY
  NPM_PACKAGE
}

enum ArtifactNamespace {
  // Blockchains
  ETHEREUM
  OPTIMISM
  GOERLI
  // Software
  GITHUB
  GITLAB
  NPM_REGISTRY
}

enum ContributorNamespace {
  GITHUB_USER
}
