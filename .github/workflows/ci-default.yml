# NOTE: This name appears in GitHub's Checks API and in workflow's status badge.
name: ci-default
env:
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  NEXT_PUBLIC_DOMAIN: ${{ vars.NEXT_PUBLIC_DOMAIN }}
  NEXT_PUBLIC_DEFAULT_CHAIN_ID: ${{ vars.NEXT_PUBLIC_DEFAULT_CHAIN_ID }}
  NEXT_PUBLIC_CONTRACT_ADDRESS: ${{ vars.NEXT_PUBLIC_CONTRACT_ADDRESS }}
  NEXT_PUBLIC_GRAPH_URL: ${{ vars.NEXT_PUBLIC_GRAPH_URL }}
  NFT_STORAGE_TOKEN: ${{ secrets.NEXT_PUBLIC_NFT_STORAGE_TOKEN }}
  WEB3_STORAGE_TOKEN: ${{ secrets.NEXT_PUBLIC_NFT_STORAGE_TOKEN }}
  NEXT_PUBLIC_NFT_STORAGE_TOKEN: ${{ secrets.NEXT_PUBLIC_NFT_STORAGE_TOKEN }}
  NEXT_PUBLIC_WEB3_STORAGE_TOKEN: ${{ secrets.NEXT_PUBLIC_NFT_STORAGE_TOKEN }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXT_PUBLIC_SUPABASE_TABLE: ${{ vars.NEXT_PUBLIC_SUPABASE_TABLE }}
  NEXT_PUBLIC_WALLETCONNECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_ID }}
  INFURA_API_KEY: ${{ vars.INFURA_API_KEY }}
  ALCHEMY_API_KEY: ${{ vars.ALCHEMY_API_KEY }}
  DOCKER_PLATFORM: "amd64"

# Trigger the workflow when:
on:
  # A push occurs to one of the matched branches.
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Cancel in progress jobs on new pushes.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    # NOTE: This name appears in GitHub's Checks API.
    name: test
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Check out pull request's HEAD commit instead of the merge commit to
          # prevent gitlint from failing due to too long commit message titles,
          # e.g. "Merge 3e621938d65caaa67f8e35d145335d889d470fc8 into 19a39b2f66cd7a165082d1486b2f1eb36ec2354a".
          ref: ${{ github.event.pull_request.head.sha }}
          # Fetch all history so gitlint can check the relevant commits.
          fetch-depth: "0"
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.9.0
      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18.15.0"
          cache: "pnpm"
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
      - name: Install
        run: |
          pnpm install --frozen-lockfile
        # Always run this step so that all linting errors can be seen at once.
        if: always()
      - name: Build
        run: |
          pnpm run build
        # Always run this step so that all linting errors can be seen at once.
        if: always()
      - name: Lint
        run: |
          pnpm run lint
        # Always run this step so that all linting errors can be seen at once.
        if: always()
      - name: Test
        run: |
          pnpm test
        # Always run this step so that all linting errors can be seen at once.
        if: always()
