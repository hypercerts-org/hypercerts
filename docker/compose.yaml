version: '3'

volumes:
  node_modules:
  graph_modules:
  sdk_modules:
  contracts_modules:
  postgres_storage:
  ipfs_staging:
  ipfs_data:
  subgraph.yaml:


services:
  install:
    image: ghcr.io/hypercerts-org/node-dev-18:1.0
    working_dir: /usr/src/app
    command: yarn install --non-interactive --frozen-lockfile
    volumes:
      - ../:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      - sdk_modules:/usr/src/app/sdk/node_modules
      - contracts_modules:/usr/src/app/contracts/node_modules
      - graph_modules:/usr/src/app/graph/node_modules
  localchain:
    image: ghcr.io/hypercerts-org/node-dev-18:1.0
    ports:
      - "${FRONTEND_RPC_PORT}:8545"
    working_dir: /usr/src/app/contracts
    command: yarn hardhat node
    depends_on:
      install:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8545" ]
      interval: 1s
      timeout: 15s
      retries: 5
      start_period: 30s
    volumes:
      - ../:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      - sdk_modules:/usr/src/app/sdk/node_modules
      - contracts_modules:/usr/src/app/contracts/node_modules
      - graph_modules:/usr/src/app/graph/node_modules
  after_localchain:
    image: ghcr.io/hypercerts-org/node-dev-18:1.0
    working_dir: /usr/src/app
    command: bash docker/after_localchain.sh
    depends_on:
      localchain:
        condition: service_healthy
    environment:
      - PLASMIC_PROJECT_ID=${PLASMIC_PROJECT_ID}
      - PLASMIC_PROJECT_API_TOKEN=${PLASMIC_PROJECT_API_TOKEN}
      - LOCAL_TESTING_ADDRESS=${LOCAL_TESTING_ADDRESS}
      - FRONTEND_RPC_PORT=${FRONTEND_RPC_PORT}
      - FRONTEND_RPC_HOST=${FRONTEND_RPC_HOST}
      - FRONTEND_GRAPH_HOST=${FRONTEND_GRAPH_HOST}
      - FRONTEND_GRAPH_HTTP_PORT=${FRONTEND_GRAPH_HTTP_PORT}
      - FRONTEND_GRAPH_WS_PORT=${FRONTEND_GRAPH_WS_PORT}
      - FRONTEND_GRAPH_JSON_RPC_PORT=${FRONTEND_GRAPH_JSON_RPC_PORT}
      - FRONTEND_GRAPH_INDEX_STATUS_PORT=${FRONTEND_GRAPH_INDEX_STATUS_PORT}
      - FRONTEND_IPFS_HOST=${FRONTEND_IPFS_HOST}
      - FRONTEND_IPFS_LIBP2P_PORT=${FRONTEND_IPFS_LIBP2P_PORT}
      - FRONTEND_IPFS_API_PORT=${FRONTEND_IPFS_API_PORT}
      - FRONTEND_IPFS_GATEWAY_PORT=${FRONTEND_IPFS_GATEWAY_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - NEXT_PUBLIC_NFT_STORAGE_TOKEN=${NEXT_PUBLIC_NFT_STORAGE_TOKEN}
      - NEXT_PUBLIC_WEB3_STORAGE_TOKEN=${NEXT_PUBLIC_WEB3_STORAGE_TOKEN}
      - NEXT_PUBLIC_WALLETCONNECT_ID=${NEXT_PUBLIC_WALLETCONNECT_ID}
    volumes:
      - ../:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      - sdk_modules:/usr/src/app/sdk/node_modules
      - contracts_modules:/usr/src/app/contracts/node_modules
      - graph_modules:/usr/src/app/graph/node_modules
      - postgres_storage:/postgres
      - ipfs_staging:/ipfs_staging
      - ipfs_data:/ipfs_data
  tx_client:
    image: ghcr.io/hypercerts-org/node-dev-18:1.0
    working_dir: /usr/src/app
    command: docker/tx_client.sh
    depends_on:
      after_graph:
        condition: service_completed_successfully
    volumes:
      - ../:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      - sdk_modules:/usr/src/app/sdk/node_modules
      - contracts_modules:/usr/src/app/contracts/node_modules
      - graph_modules:/usr/src/app/graph/node_modules
  frontend:
    profiles:
      - testing
    image: ghcr.io/hypercerts-org/node-dev-18:1.0
    working_dir: /usr/src/app
    ports:
      - "${FRONTEND_PORT}:3000"
    command: bash docker/frontend.sh
    depends_on:
      after_localchain:
        condition: service_completed_successfully
      after_graph:
        condition: service_completed_successfully
    volumes:
      - ../:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      - sdk_modules:/usr/src/app/sdk/node_modules
      - contracts_modules:/usr/src/app/contracts/node_modules
      - graph_modules:/usr/src/app/graph/node_modules
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
  ipfs:
    image: ipfs/kubo
    command: daemon --offline --migrate=true --agent-version-suffix=docker
    depends_on:
      after_localchain:
        condition: service_completed_successfully
    ports:
      - "${FRONTEND_IPFS_GATEWAY_PORT}:8080"
      - "${FRONTEND_IPFS_API_PORT}:5001"
      # Don't need to expose the libp2p port at this time.
      # - "${IPFS_LIBP2P_PORT}:4001"
    volumes:
      - ipfs_staging:/export
      - ipfs_data:/data/ipfs
  postgres:
    image: postgres:15
    restart: always
    user: postgres
    depends_on:
      after_localchain:
        condition: service_completed_successfully
    # Required command for the graph
    command:
      [
        "postgres",
        "-cshared_preload_libraries=pg_stat_statements"
      ]
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./postgres.init.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: graph-node
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  graph:
    image: ghcr.io/hypercerts-org/graph-node-dev:1.0
    depends_on:
      postgres:
        condition: service_healthy
      localchain:
        condition: service_healthy
    environment:
      postgres_host: postgres
      postgres_port: 5432
      postgres_user: postgres
      postgres_pass: postgres
      postgres_db: graph
      ipfs: ipfs:5001
      ethereum: hardhat:http://localchain:8545
    ports:
      # WS
      - "${FRONTEND_GRAPH_WS_PORT}:8001"
      # JSON-RPC
      - "${FRONTEND_GRAPH_JSON_RPC_PORT}:8020"
      # Indexing status
      - "${FRONTEND_GRAPH_INDEX_STATUS_PORT}:8030"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
  graph_proxy:
    # This proxy is required to fix some CORS issues with the graph
    image: nginx
    volumes:
      - ./nginx/graph_nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      graph:
        condition: service_healthy
    ports:
      - "${FRONTEND_GRAPH_HTTP_PORT}:80"
  after_graph:
    image: ghcr.io/hypercerts-org/node-dev-18:1.0
    depends_on:
      graph:
        condition: service_healthy
    working_dir: /usr/src/app
    command: bash docker/after_graph.sh
    volumes:
      - ../:/usr/src/app
      - node_modules:/usr/src/app/node_modules
      - sdk_modules:/usr/src/app/sdk/node_modules
      - contracts_modules:/usr/src/app/contracts/node_modules
      - graph_modules:/usr/src/app/graph/node_modules
