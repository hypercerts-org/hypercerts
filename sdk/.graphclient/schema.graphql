schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  allowlist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Allowlist
  allowlists(
    skip: Int = 0
    first: Int = 100
    orderBy: Allowlist_orderBy
    orderDirection: OrderDirection
    where: Allowlist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Allowlist!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  claimToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimToken
  claimTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimToken_orderBy
    orderDirection: OrderDirection
    where: ClaimToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimToken!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  acceptedToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AcceptedToken
  acceptedTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: AcceptedToken_orderBy
    orderDirection: OrderDirection
    where: AcceptedToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AcceptedToken!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  trade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trades(
    skip: Int = 0
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    where: Trade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trade!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  allowlist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Allowlist
  allowlists(
    skip: Int = 0
    first: Int = 100
    orderBy: Allowlist_orderBy
    orderDirection: OrderDirection
    where: Allowlist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Allowlist!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  claimToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimToken
  claimTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimToken_orderBy
    orderDirection: OrderDirection
    where: ClaimToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimToken!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  acceptedToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AcceptedToken
  acceptedTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: AcceptedToken_orderBy
    orderDirection: OrderDirection
    where: AcceptedToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AcceptedToken!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  trade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trades(
    skip: Int = 0
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    where: Trade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trade!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type AcceptedToken {
  id: String!
  token: Token!
  minimumAmountPerUnit: BigInt!
  accepted: Boolean!
}

input AcceptedToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  minimumAmountPerUnit: BigInt
  minimumAmountPerUnit_not: BigInt
  minimumAmountPerUnit_gt: BigInt
  minimumAmountPerUnit_lt: BigInt
  minimumAmountPerUnit_gte: BigInt
  minimumAmountPerUnit_lte: BigInt
  minimumAmountPerUnit_in: [BigInt!]
  minimumAmountPerUnit_not_in: [BigInt!]
  accepted: Boolean
  accepted_not: Boolean
  accepted_in: [Boolean!]
  accepted_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AcceptedToken_filter]
  or: [AcceptedToken_filter]
}

enum AcceptedToken_orderBy {
  id
  token
  token__id
  token__name
  token__symbol
  token__decimals
  minimumAmountPerUnit
  accepted
}

type Allowlist {
  id: String!
  root: Bytes!
  claim: Claim!
}

input Allowlist_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  root: Bytes
  root_not: Bytes
  root_gt: Bytes
  root_lt: Bytes
  root_gte: Bytes
  root_lte: Bytes
  root_in: [Bytes!]
  root_not_in: [Bytes!]
  root_contains: Bytes
  root_not_contains: Bytes
  claim: String
  claim_not: String
  claim_gt: String
  claim_lt: String
  claim_gte: String
  claim_lte: String
  claim_in: [String!]
  claim_not_in: [String!]
  claim_contains: String
  claim_contains_nocase: String
  claim_not_contains: String
  claim_not_contains_nocase: String
  claim_starts_with: String
  claim_starts_with_nocase: String
  claim_not_starts_with: String
  claim_not_starts_with_nocase: String
  claim_ends_with: String
  claim_ends_with_nocase: String
  claim_not_ends_with: String
  claim_not_ends_with_nocase: String
  claim_: Claim_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Allowlist_filter]
  or: [Allowlist_filter]
}

enum Allowlist_orderBy {
  id
  root
  claim
  claim__id
  claim__creation
  claim__tokenID
  claim__contract
  claim__uri
  claim__creator
  claim__owner
  claim__totalUnits
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Claim {
  id: String!
  creation: BigInt!
  tokenID: BigInt!
  contract: String!
  uri: String
  creator: Bytes
  owner: Bytes
  totalUnits: BigInt
  allowlist: Allowlist
  graphName: String!
}

type ClaimToken {
  id: String!
  tokenID: BigInt!
  claim: Claim!
  owner: Bytes!
  units: BigInt!
  offers(skip: Int = 0, first: Int = 100, orderBy: Offer_orderBy, orderDirection: OrderDirection, where: Offer_filter): [Offer!]
  graphName: String!
}

input ClaimToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  tokenID: BigInt
  tokenID_not: BigInt
  tokenID_gt: BigInt
  tokenID_lt: BigInt
  tokenID_gte: BigInt
  tokenID_lte: BigInt
  tokenID_in: [BigInt!]
  tokenID_not_in: [BigInt!]
  claim: String
  claim_not: String
  claim_gt: String
  claim_lt: String
  claim_gte: String
  claim_lte: String
  claim_in: [String!]
  claim_not_in: [String!]
  claim_contains: String
  claim_contains_nocase: String
  claim_not_contains: String
  claim_not_contains_nocase: String
  claim_starts_with: String
  claim_starts_with_nocase: String
  claim_not_starts_with: String
  claim_not_starts_with_nocase: String
  claim_ends_with: String
  claim_ends_with_nocase: String
  claim_not_ends_with: String
  claim_not_ends_with_nocase: String
  claim_: Claim_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  units: BigInt
  units_not: BigInt
  units_gt: BigInt
  units_lt: BigInt
  units_gte: BigInt
  units_lte: BigInt
  units_in: [BigInt!]
  units_not_in: [BigInt!]
  offers_: Offer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimToken_filter]
  or: [ClaimToken_filter]
}

enum ClaimToken_orderBy {
  id
  tokenID
  claim
  claim__id
  claim__creation
  claim__tokenID
  claim__contract
  claim__uri
  claim__creator
  claim__owner
  claim__totalUnits
  owner
  units
  offers
}

input Claim_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  creation: BigInt
  creation_not: BigInt
  creation_gt: BigInt
  creation_lt: BigInt
  creation_gte: BigInt
  creation_lte: BigInt
  creation_in: [BigInt!]
  creation_not_in: [BigInt!]
  tokenID: BigInt
  tokenID_not: BigInt
  tokenID_gt: BigInt
  tokenID_lt: BigInt
  tokenID_gte: BigInt
  tokenID_lte: BigInt
  tokenID_in: [BigInt!]
  tokenID_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  creator: Bytes
  creator_not: Bytes
  creator_gt: Bytes
  creator_lt: Bytes
  creator_gte: Bytes
  creator_lte: Bytes
  creator_in: [Bytes!]
  creator_not_in: [Bytes!]
  creator_contains: Bytes
  creator_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  totalUnits: BigInt
  totalUnits_not: BigInt
  totalUnits_gt: BigInt
  totalUnits_lt: BigInt
  totalUnits_gte: BigInt
  totalUnits_lte: BigInt
  totalUnits_in: [BigInt!]
  totalUnits_not_in: [BigInt!]
  allowlist: String
  allowlist_not: String
  allowlist_gt: String
  allowlist_lt: String
  allowlist_gte: String
  allowlist_lte: String
  allowlist_in: [String!]
  allowlist_not_in: [String!]
  allowlist_contains: String
  allowlist_contains_nocase: String
  allowlist_not_contains: String
  allowlist_not_contains_nocase: String
  allowlist_starts_with: String
  allowlist_starts_with_nocase: String
  allowlist_not_starts_with: String
  allowlist_not_starts_with_nocase: String
  allowlist_ends_with: String
  allowlist_ends_with_nocase: String
  allowlist_not_ends_with: String
  allowlist_not_ends_with_nocase: String
  allowlist_: Allowlist_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Claim_filter]
  or: [Claim_filter]
}

enum Claim_orderBy {
  id
  creation
  tokenID
  contract
  uri
  creator
  owner
  totalUnits
  allowlist
  allowlist__id
  allowlist__root
}

"""
8 bytes signed integer

"""
scalar Int8

type Offer {
  id: String!
  fractionID: ClaimToken!
  unitsAvailable: BigInt!
  minUnitsPerTrade: BigInt!
  maxUnitsPerTrade: BigInt!
  status: OfferStatus!
  acceptedTokens(skip: Int = 0, first: Int = 100, orderBy: AcceptedToken_orderBy, orderDirection: OrderDirection, where: AcceptedToken_filter): [AcceptedToken!]!
}

enum OfferStatus {
  Open
  Fulfilled
  Cancelled
}

input Offer_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  fractionID: String
  fractionID_not: String
  fractionID_gt: String
  fractionID_lt: String
  fractionID_gte: String
  fractionID_lte: String
  fractionID_in: [String!]
  fractionID_not_in: [String!]
  fractionID_contains: String
  fractionID_contains_nocase: String
  fractionID_not_contains: String
  fractionID_not_contains_nocase: String
  fractionID_starts_with: String
  fractionID_starts_with_nocase: String
  fractionID_not_starts_with: String
  fractionID_not_starts_with_nocase: String
  fractionID_ends_with: String
  fractionID_ends_with_nocase: String
  fractionID_not_ends_with: String
  fractionID_not_ends_with_nocase: String
  fractionID_: ClaimToken_filter
  unitsAvailable: BigInt
  unitsAvailable_not: BigInt
  unitsAvailable_gt: BigInt
  unitsAvailable_lt: BigInt
  unitsAvailable_gte: BigInt
  unitsAvailable_lte: BigInt
  unitsAvailable_in: [BigInt!]
  unitsAvailable_not_in: [BigInt!]
  minUnitsPerTrade: BigInt
  minUnitsPerTrade_not: BigInt
  minUnitsPerTrade_gt: BigInt
  minUnitsPerTrade_lt: BigInt
  minUnitsPerTrade_gte: BigInt
  minUnitsPerTrade_lte: BigInt
  minUnitsPerTrade_in: [BigInt!]
  minUnitsPerTrade_not_in: [BigInt!]
  maxUnitsPerTrade: BigInt
  maxUnitsPerTrade_not: BigInt
  maxUnitsPerTrade_gt: BigInt
  maxUnitsPerTrade_lt: BigInt
  maxUnitsPerTrade_gte: BigInt
  maxUnitsPerTrade_lte: BigInt
  maxUnitsPerTrade_in: [BigInt!]
  maxUnitsPerTrade_not_in: [BigInt!]
  status: OfferStatus
  status_not: OfferStatus
  status_in: [OfferStatus!]
  status_not_in: [OfferStatus!]
  acceptedTokens: [String!]
  acceptedTokens_not: [String!]
  acceptedTokens_contains: [String!]
  acceptedTokens_contains_nocase: [String!]
  acceptedTokens_not_contains: [String!]
  acceptedTokens_not_contains_nocase: [String!]
  acceptedTokens_: AcceptedToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Offer_filter]
  or: [Offer_filter]
}

enum Offer_orderBy {
  id
  fractionID
  fractionID__id
  fractionID__tokenID
  fractionID__owner
  fractionID__units
  unitsAvailable
  minUnitsPerTrade
  maxUnitsPerTrade
  status
  acceptedTokens
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Token {
  id: String!
  name: String!
  symbol: String
  decimals: BigInt
}

input Token_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  name
  symbol
  decimals
}

type Trade {
  id: String!
  buyer: Bytes!
  offerID: Offer!
  unitsSold: BigInt!
  token: Token!
  amountPerUnit: BigInt!
}

input Trade_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  buyer: Bytes
  buyer_not: Bytes
  buyer_gt: Bytes
  buyer_lt: Bytes
  buyer_gte: Bytes
  buyer_lte: Bytes
  buyer_in: [Bytes!]
  buyer_not_in: [Bytes!]
  buyer_contains: Bytes
  buyer_not_contains: Bytes
  offerID: String
  offerID_not: String
  offerID_gt: String
  offerID_lt: String
  offerID_gte: String
  offerID_lte: String
  offerID_in: [String!]
  offerID_not_in: [String!]
  offerID_contains: String
  offerID_contains_nocase: String
  offerID_not_contains: String
  offerID_not_contains_nocase: String
  offerID_starts_with: String
  offerID_starts_with_nocase: String
  offerID_not_starts_with: String
  offerID_not_starts_with_nocase: String
  offerID_ends_with: String
  offerID_ends_with_nocase: String
  offerID_not_ends_with: String
  offerID_not_ends_with_nocase: String
  offerID_: Offer_filter
  unitsSold: BigInt
  unitsSold_not: BigInt
  unitsSold_gt: BigInt
  unitsSold_lt: BigInt
  unitsSold_gte: BigInt
  unitsSold_lte: BigInt
  unitsSold_in: [BigInt!]
  unitsSold_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amountPerUnit: BigInt
  amountPerUnit_not: BigInt
  amountPerUnit_gt: BigInt
  amountPerUnit_lt: BigInt
  amountPerUnit_gte: BigInt
  amountPerUnit_lte: BigInt
  amountPerUnit_in: [BigInt!]
  amountPerUnit_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Trade_filter]
  or: [Trade_filter]
}

enum Trade_orderBy {
  id
  buyer
  offerID
  offerID__id
  offerID__unitsAvailable
  offerID__minUnitsPerTrade
  offerID__maxUnitsPerTrade
  offerID__status
  unitsSold
  token
  token__id
  token__name
  token__symbol
  token__decimals
  amountPerUnit
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}