import { logger } from "./utils";
import { HypercertClientConfig, HypercertIndexerInterface } from "./types";

import { AnyVariables, cacheExchange, Client, fetchExchange } from "@urql/core";
import {
  HypercertByIdDocument,
  HypercertByIdQueryVariables,
  HypercertsByCreatorDocument,
  HypercertsByCreatorQueryVariables,
  FractionsByHypercertDocument,
  FractionsByHypercertQueryVariables,
  FractionsByOwnerDocument,
  FractionsByOwnerQueryVariables,
  RecentHypercertsDocument,
  RecentHypercertsQueryVariables,
  FractionByIdDocument,
  FractionByIdQueryVariables,
  MetadataByUriDocument,
  MetadataByUriQueryVariables,
  MetadataForHypercertDocument,
  MetadataForHypercertQueryVariables,
} from "./__generated__/gql/graphql";
import { TypedDocumentNode } from "@graphql-typed-document-node/core";
import { DocumentNode } from "graphql";

/**
 * A class that provides indexing functionality for Hypercerts.
 *
 * This class implements the `HypercertIndexerInterface` and provides methods for retrieving claims by owner and by ID. It uses the Graph client for indexing.
 * Because of the autogenerated Graph client packed with the SDK, this class is not recommended for custom Graph deployments.
 *
 * @example
 * const indexer = new HypercertIndexer({ indexerEnvironment: 'production' });
 * const claims = await indexer.claimsByOwner('your-address');
 */
export class HypercertIndexer implements HypercertIndexerInterface {
  private graphClient: Client;

  /**
   * Creates a new instance of the `HypercertIndexer` class.
   * @param options The configuration options for the indexer.
   */
  constructor({ graphUrl, environment }: Pick<HypercertClientConfig, "graphUrl" | "environment">) {
    logger.info("Creating HypercertIndexer", "constructor (write)", {
      environment,
    });

    if (!environment) {
      throw new Error("Missing environment");
    }

    logger.info("Creating Graph client", "constructor (read)", { graphUrl });

    this.graphClient = new Client({
      url: graphUrl,
      exchanges: [cacheExchange, fetchExchange],
    });
  }

  /* eslint-disable  @typescript-eslint/no-explicit-any */
  performQuery = async <Data = DocumentNode, Variables extends AnyVariables = any>(
    query: TypedDocumentNode<Data, Variables>,
    variables: Variables,
  ) => {
    return this.graphClient
      .query<Data, Variables>(query, variables)
      .toPromise()
      .then((res: any) => {
        if (res.error) {
          throw res.error;
        }

        return res.data;
      });
  };

  /**
   * Gets the Graph client used by the indexer.
   * @returns The Graph client.
   */
  getGraphClient(): Client {
    return this.graphClient;
  }

  /**
   * Gets the claims owned by a given address.
   * @param owner The address of the owner.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claims.
   */
  hypercertsByOwner = async (variables: HypercertsByCreatorQueryVariables) => {
    return await this.performQuery(HypercertsByCreatorDocument, variables);
  };

  /**
   * Gets a claim by its ID.
   * @param hypercertId The ID of the claim.
   * @returns A Promise that resolves to the claim.
   */
  hypercertById = async (variables: HypercertByIdQueryVariables) => {
    return await this.performQuery(HypercertByIdDocument, variables);
  };

  /**
   * Gets the claim tokens owned by a given address.
   * @param owner The address of the owner.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claim tokens.
   */
  fractionsByOwner = async (variables: FractionsByOwnerQueryVariables) => {
    return await this.performQuery(FractionsByOwnerDocument, variables);
  };

  /**
   * Gets the claim tokens for a given claim.
   * @param hypercertId The ID of the claim.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claim tokens.
   */
  fractionsByHypercert = async (variables: FractionsByHypercertQueryVariables) => {
    return await this.performQuery(FractionsByHypercertDocument, variables);
  };

  /**
   * Gets the fraction by its ID.
   * @param $fractionId The ID of the fraction.
   * @returns A Promise that resolves to the fraction.
   */
  fractionById = async (variables: FractionByIdQueryVariables) => {
    return await this.performQuery(FractionByIdDocument, variables);
  };

  /**
   * Gets the metadata for a given URI.
   * @param uri The URI of the metadata.
   * @returns A Promise that resolves to the metadata.
   */
  metadataByUri = async (variables: MetadataByUriQueryVariables) => {
    return await this.performQuery(MetadataByUriDocument, variables);
  };

  /**
   * Gets the metadata for a given hypercert.
   * @param hypercertId The ID of the hypercert.
   * @returns A Promise that resolves to the metadata.
   */
  metadataForHypercert = async (variables: MetadataForHypercertQueryVariables) => {
    return await this.performQuery(MetadataForHypercertDocument, variables);
  };

  /**
   * Gets the most recent claims.
   * @param params The query parameters.
   * @returns A Promise that resolves to the most recent claims.
   */
  recentHypercerts = async (variables: RecentHypercertsQueryVariables) => {
    return await this.performQuery(RecentHypercertsDocument, variables);
  };
}
