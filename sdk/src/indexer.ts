import { logger } from "./utils";

import { defaultQueryParams } from "./indexer/utils";
import { HypercertClientConfig, HypercertIndexerInterface, QueryParams } from "./types";
import { Client, cacheExchange, fetchExchange } from "@urql/core";
import {
  ClaimsByOwnerDocument,
  ClaimsByOwnerQueryVariables,
  ClaimByIdDocument,
  ClaimByIdQueryVariables,
  RecentClaimsDocument,
  RecentClaimsQueryVariables,
  ClaimTokensByOwnerDocument,
  ClaimTokensByOwnerQueryVariables,
  ClaimTokensByClaimDocument,
  ClaimTokensByClaimQueryVariables,
  ClaimTokenByIdDocument,
  ClaimTokenByIdQueryVariables,
} from "./indexer/gql/graphql";
/**
 * A class that provides indexing functionality for Hypercerts.
 *
 * This class implements the `HypercertIndexerInterface` and provides methods for retrieving claims by owner and by ID. It uses the Graph client for indexing.
 * Because of the autogenerated Graph client packed with the SDK, this class is not recommended for custom Graph deployments.
 *
 * @property {GraphClient} _graphClient - The Graph client used by the indexer.
 *
 * @example
 * const indexer = new HypercertIndexer({ graphUrl: 'your-graph-url', graphName: 'your-graph-name' });
 * const claims = await indexer.claimsByOwner('your-address');
 */
export class HypercertIndexer implements HypercertIndexerInterface {
  /** The Graph client used by the indexer. */
  private _graphName?: string;
  private _graphUrl: string;

  /**
   * Creates a new instance of the `HypercertIndexer` class.
   * @param options The configuration options for the indexer.
   */
  constructor(options: Partial<HypercertClientConfig>) {
    logger.info("Creating HypercertIndexer", "constructor", { name: options.graphName, url: options.graphUrl });
    if (!options.graphUrl) throw new Error("Missing graphUrl");
    this._graphName = options.graphName;
    this._graphUrl = options.graphUrl;
  }

  /**
   * Gets the Graph client used by the indexer.
   * @returns The Graph client.
   */
  get graphClient(): Client {
    return new Client({
      url: this._graphUrl,
      exchanges: [cacheExchange, fetchExchange],
    });
  }

  /**
   * Gets the claims owned by a given address.
   * @param owner The address of the owner.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claims.
   */
  claimsByOwner = async (owner: string, params: QueryParams = defaultQueryParams) => {
    const query = ClaimsByOwnerDocument;
    const variables: ClaimsByOwnerQueryVariables = {
      owner,
      ...params,
    };

    const result = await this.graphClient.query(query, variables);

    if (result.error) {
      throw result.error;
    }

    return result.data;
  };

  /**
   * Gets a claim by its ID.
   * @param id The ID of the claim.
   * @returns A Promise that resolves to the claim.
   */
  claimById = async (id: string) => {
    const query = ClaimByIdDocument;
    const variables: ClaimByIdQueryVariables = {
      id,
    };
    const result = await this.graphClient.query(query, variables);

    if (result.error) {
      throw result.error;
    }

    return result.data;
  };
  /**
   * Gets the most recent claims.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claims.
   */
  firstClaims = async (params: QueryParams = defaultQueryParams) => {
    const query = RecentClaimsDocument;
    const variables: RecentClaimsQueryVariables = {
      ...params,
    };
    const result = await this.graphClient.query(query, variables);

    if (result.error) {
      throw result.error;
    }

    return result.data;
  };

  /**
   * Gets the claim tokens owned by a given address.
   * @param owner The address of the owner.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claim tokens.
   */
  fractionsByOwner = async (owner: string, params: QueryParams = defaultQueryParams) => {
    const query = ClaimTokensByOwnerDocument;
    const variables: ClaimTokensByOwnerQueryVariables = {
      owner,
      ...params,
    };
    const result = await this.graphClient.query(query, variables);

    if (result.error) {
      throw result.error;
    }

    return result.data;
  };

  /**
   * Gets the claim tokens for a given claim.
   * @param claimId The ID of the claim.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claim tokens.
   */
  fractionsByClaim = async (claimId: string, params: QueryParams = defaultQueryParams) => {
    const query = ClaimTokensByClaimDocument;
    const variables: ClaimTokensByClaimQueryVariables = {
      claimId,
      ...params,
    };
    const result = await this.graphClient.query(query, variables);

    if (result.error) {
      throw result.error;
    }

    return result.data;
  };

  /**
   * Gets a claim token by its ID.
   * @param fractionId The ID of the claim token.
   * @returns A Promise that resolves to the claim token.
   */
  fractionById = async (fractionId: string) => {
    const query = ClaimTokenByIdDocument;
    const variables: ClaimTokenByIdQueryVariables = {
      claimTokenId: fractionId,
    };
    const result = await this.graphClient.query(query, variables);

    if (result.error) {
      throw result.error;
    }

    return result.data;
  };
}
