import { logger } from "./utils";
import { HypercertClientConfig, HypercertIndexerInterface, IndexerEnvironment } from "./types";

import { AnyVariables, cacheExchange, Client, fetchExchange } from "@urql/core";
import {
  HypercertByIdDocument,
  HypercertByIdQueryVariables,
  HypercertsByOwnerDocument,
  HypercertsByOwnerQueryVariables,
  FractionsByHypercertDocument,
  FractionsByHypercertQueryVariables,
  FractionsByOwnerDocument,
  FractionsByOwnerQueryVariables,
  RecentHypercertsDocument,
  RecentHypercertsQueryVariables,
} from "./indexer/gql/graphql";
import { DEPLOYMENTS, GRAPHS } from "./constants";
import { TypedDocumentNode } from "@graphql-typed-document-node/core";
import { DocumentNode } from "graphql";

/**
 * A class that provides indexing functionality for Hypercerts.
 *
 * This class implements the `HypercertIndexerInterface` and provides methods for retrieving claims by owner and by ID. It uses the Graph client for indexing.
 * Because of the autogenerated Graph client packed with the SDK, this class is not recommended for custom Graph deployments.
 *
 * @example
 * const indexer = new HypercertIndexer({ indexerEnvironment: 'production' });
 * const claims = await indexer.claimsByOwner('your-address');
 */
export class HypercertIndexer implements HypercertIndexerInterface {
  /** The Graph client used by the indexer. */
  private environment: IndexerEnvironment;

  private graphClient: Client;

  /**
   * Creates a new instance of the `HypercertIndexer` class.
   * @param options The configuration options for the indexer.
   */
  constructor(options: Partial<HypercertClientConfig>) {
    logger.info("Creating HypercertIndexer", "constructor (write)", {
      environment: options.indexerEnvironment,
    });

    if (!options.indexerEnvironment) {
      throw new Error("Missing indexer environment");
    }
    this.environment = options.indexerEnvironment;

    const environments = HypercertIndexer.getDeploymentsForEnvironment(this.environment);
    logger.info("Creating Graph clients", "constructor (read)", { environments });

    this.graphClient = new Client({
      url: GRAPHS[options.indexerEnvironment],
      exchanges: [cacheExchange, fetchExchange],
    });
  }

  static getDeploymentsForEnvironment(environment: IndexerEnvironment) {
    logger.info("Indexer", "getDeploymentsForEnvironment", { environment });
    return Object.entries(DEPLOYMENTS).filter(([_, deployment]) => {
      if (environment === "all") {
        return true;
      }

      if (environment === "test") {
        return deployment.isTestnet;
      }

      if (environment === "production") {
        return !deployment.isTestnet;
      }

      return false;
    });
  }

  /* eslint-disable  @typescript-eslint/no-explicit-any */
  performQuery = async <Data = DocumentNode, Variables extends AnyVariables = any>(
    query: TypedDocumentNode<Data, Variables>,
    variables: Variables,
  ) => {
    return this.graphClient
      .query<Data, Variables>(query, variables)
      .toPromise()
      .then((res) => {
        if (res.error) {
          throw res.error;
        }

        return res.data;
      });
  };

  /**
   * Gets the Graph client used by the indexer.
   * @returns The Graph client.
   */
  getGraphClient(): Client {
    return this.graphClient;
  }

  /**
   * Gets the claims owned by a given address.
   * @param owner The address of the owner.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claims.
   */
  hypercertsByOwner = async (variables: HypercertsByOwnerQueryVariables) => {
    return await this.performQuery(HypercertsByOwnerDocument, variables);
  };

  /**
   * Gets a claim by its ID.
   * @param hypercertId The ID of the claim.
   * @returns A Promise that resolves to the claim.
   */
  hypercertById = async (variables: HypercertByIdQueryVariables) => {
    return await this.performQuery(HypercertByIdDocument, variables);
  };

  /**
   * Gets the claim tokens owned by a given address.
   * @param owner The address of the owner.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claim tokens.
   */
  fractionsByOwner = async (variables: FractionsByOwnerQueryVariables) => {
    return await this.performQuery(FractionsByOwnerDocument, variables);
  };

  /**
   * Gets the claim tokens for a given claim.
   * @param hypercertId The ID of the claim.
   * @param params The query parameters.
   * @returns A Promise that resolves to the claim tokens.
   */
  fractionsByHypercert = async (variables: FractionsByHypercertQueryVariables) => {
    return await this.performQuery(FractionsByHypercertDocument, variables);
  };

  /**
   * Gets the most recent claims.
   * @param params The query parameters.
   * @returns A Promise that resolves to the most recent claims.
   */
  recentHypercerts = async (variables: RecentHypercertsQueryVariables) => {
    return await this.performQuery(RecentHypercertsDocument, variables);
  };
}
