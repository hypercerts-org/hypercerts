{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07",
      "kind": "uups"
    },
    {
      "address": "0x689587461AA3103D3D7975c5e4B352Ab711C14C2",
      "txHash": "0x236119a264468c853263e067fbde6781c2c4109a5a3027a9adcfdca56b9bdacb",
      "kind": "uups"
    }
  ],
  "impls": {
    "ba3b8c36d1292bdec3593f0e2b8f6d2e38d080b76cb70de7876aba5db39b7d86": {
      "address": "0xb5bE374ee965C60c86D5B0C5aA3C6E545ED785c4",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:528"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_baseURI",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:27"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:30"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:77"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "251",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "typeCounter",
            "offset": 0,
            "slot": "401",
            "type": "t_uint256",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:27"
          },
          {
            "label": "owners",
            "offset": 0,
            "slot": "402",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:38"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "403",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:41"
          },
          {
            "label": "tokenValues",
            "offset": 0,
            "slot": "404",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:44"
          },
          {
            "label": "maxIndex",
            "offset": 0,
            "slot": "405",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "406",
            "type": "t_array(t_uint256)25_storage",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:436"
          },
          {
            "label": "merkleRoots",
            "offset": 0,
            "slot": "431",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:17"
          },
          {
            "label": "hasBeenClaimed",
            "offset": 0,
            "slot": "432",
            "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:18"
          },
          {
            "label": "maxUnits",
            "offset": 0,
            "slot": "433",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:19"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "434",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "435",
            "type": "t_array(t_uint256)26_storage",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:69"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "461",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "462",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "typeRestrictions",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_enum(TransferRestrictions)6793)",
            "contract": "HypercertMinter",
            "src": "src/HypercertMinter.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "512",
            "type": "t_array(t_uint256)29_storage",
            "contract": "HypercertMinter",
            "src": "src/HypercertMinter.sol:228"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)25_storage": {
            "label": "uint256[25]",
            "numberOfBytes": "800"
          },
          "t_array(t_uint256)26_storage": {
            "label": "uint256[26]",
            "numberOfBytes": "832"
          },
          "t_array(t_uint256)29_storage": {
            "label": "uint256[29]",
            "numberOfBytes": "928"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(TransferRestrictions)6793": {
            "label": "enum IHypercertToken.TransferRestrictions",
            "members": [
              "AllowAll",
              "DisallowAll",
              "FromCreatorOnly"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_enum(TransferRestrictions)6793)": {
            "label": "mapping(uint256 => enum IHypercertToken.TransferRestrictions)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))": {
            "label": "mapping(uint256 => mapping(bytes32 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "a74a0b26cd000c4d5c3717e7e2b2c4060405bf4c2f315356073581f711bf134d": {
      "address": "0xDb77A1fDC905685B4052a512522D502638DdA5E3",
      "txHash": "0xfe64805f07143e91ce6d02ce69e95c21f688a0cc083495baafba764274de05ff",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:528"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_baseURI",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:27"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:30"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:77"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "251",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "typeCounter",
            "offset": 0,
            "slot": "401",
            "type": "t_uint256",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:27"
          },
          {
            "label": "owners",
            "offset": 0,
            "slot": "402",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:38"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "403",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:41"
          },
          {
            "label": "tokenValues",
            "offset": 0,
            "slot": "404",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:44"
          },
          {
            "label": "maxIndex",
            "offset": 0,
            "slot": "405",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "406",
            "type": "t_array(t_uint256)25_storage",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:612"
          },
          {
            "label": "merkleRoots",
            "offset": 0,
            "slot": "431",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:17"
          },
          {
            "label": "hasBeenClaimed",
            "offset": 0,
            "slot": "432",
            "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:18"
          },
          {
            "label": "maxUnits",
            "offset": 0,
            "slot": "433",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:19"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "434",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "435",
            "type": "t_array(t_uint256)26_storage",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:69"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "461",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "462",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "typeRestrictions",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_enum(TransferRestrictions)6957)",
            "contract": "HypercertMinter",
            "src": "src/HypercertMinter.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "512",
            "type": "t_array(t_uint256)29_storage",
            "contract": "HypercertMinter",
            "src": "src/HypercertMinter.sol:246"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)25_storage": {
            "label": "uint256[25]",
            "numberOfBytes": "800"
          },
          "t_array(t_uint256)26_storage": {
            "label": "uint256[26]",
            "numberOfBytes": "832"
          },
          "t_array(t_uint256)29_storage": {
            "label": "uint256[29]",
            "numberOfBytes": "928"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(TransferRestrictions)6957": {
            "label": "enum IHypercertToken.TransferRestrictions",
            "members": [
              "AllowAll",
              "DisallowAll",
              "FromCreatorOnly"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_enum(TransferRestrictions)6957)": {
            "label": "mapping(uint256 => enum IHypercertToken.TransferRestrictions)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))": {
            "label": "mapping(uint256 => mapping(bytes32 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d1832c305d4610ff816070ba0b32f8fcbb0e86cead29b4261acf08bd5c0836e6": {
      "address": "0x8561eAE9962FA3af19e2E972Ea717d4AD407BDbF",
      "txHash": "0x0bcef85a53eb6fdec51cfa3c817e013b1ecf19f0a9387384202fae0ef66985a2",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "totalUnitsForSale",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:30"
          },
          {
            "label": "offers",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_struct(Offer)7905_storage)",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:31"
          },
          {
            "label": "_offerCounter",
            "offset": 0,
            "slot": "253",
            "type": "t_uint256",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:32"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "254",
            "type": "t_array(t_uint256)27_storage",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:359"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(AcceptedToken)7917_storage)dyn_storage": {
            "label": "struct IHypercertTrader.AcceptedToken[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)27_storage": {
            "label": "uint256[27]",
            "numberOfBytes": "864"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(OfferStatus)7912": {
            "label": "enum IHypercertTrader.OfferStatus",
            "members": [
              "Open",
              "Fulfilled",
              "Cancelled"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(OfferType)7908": {
            "label": "enum IHypercertTrader.OfferType",
            "members": [
              "Units",
              "Fraction"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Offer)7905_storage)": {
            "label": "mapping(uint256 => struct IHypercertTrader.Offer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AcceptedToken)7917_storage": {
            "label": "struct IHypercertTrader.AcceptedToken",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "minimumAmountPerUnit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Offer)7905_storage": {
            "label": "struct IHypercertTrader.Offer",
            "members": [
              {
                "label": "offerer",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "hypercertContract",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "fractionID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "unitsAvailable",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "minUnitsPerTrade",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "maxUnitsPerTrade",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "offerType",
                "type": "t_enum(OfferType)7908",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "status",
                "type": "t_enum(OfferStatus)7912",
                "offset": 1,
                "slot": "6"
              },
              {
                "label": "acceptedTokens",
                "type": "t_array(t_struct(AcceptedToken)7917_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "dd332b99b39b573f44ffeb5c8685891923934c7ddf4763cc7767f224483eff8a": {
      "address": "0x0A00a2f09cd37B24E7429c5238323bfebCfF3Ed9",
      "txHash": "0xa2c8831ddf933b36362efd3e4cd6a0f2ba640d0a4908f3f97ae43c4661077ead",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol:528"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_baseURI",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:27"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:30"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC1155URIStorageUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol:77"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "251",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "typeCounter",
            "offset": 0,
            "slot": "401",
            "type": "t_uint256",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:27"
          },
          {
            "label": "owners",
            "offset": 0,
            "slot": "402",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:38"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "403",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:41"
          },
          {
            "label": "tokenValues",
            "offset": 0,
            "slot": "404",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:44"
          },
          {
            "label": "maxIndex",
            "offset": 0,
            "slot": "405",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "406",
            "type": "t_array(t_uint256)25_storage",
            "contract": "SemiFungible1155",
            "src": "src/SemiFungible1155.sol:612"
          },
          {
            "label": "merkleRoots",
            "offset": 0,
            "slot": "431",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:17"
          },
          {
            "label": "hasBeenClaimed",
            "offset": 0,
            "slot": "432",
            "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:18"
          },
          {
            "label": "maxUnits",
            "offset": 0,
            "slot": "433",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:19"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "434",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "435",
            "type": "t_array(t_uint256)26_storage",
            "contract": "AllowlistMinter",
            "src": "src/AllowlistMinter.sol:69"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "461",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "462",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "typeRestrictions",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_enum(TransferRestrictions)7777)",
            "contract": "HypercertMinter",
            "src": "src/HypercertMinter.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "512",
            "type": "t_array(t_uint256)29_storage",
            "contract": "HypercertMinter",
            "src": "src/HypercertMinter.sol:246"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)25_storage": {
            "label": "uint256[25]",
            "numberOfBytes": "800"
          },
          "t_array(t_uint256)26_storage": {
            "label": "uint256[26]",
            "numberOfBytes": "832"
          },
          "t_array(t_uint256)29_storage": {
            "label": "uint256[29]",
            "numberOfBytes": "928"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(TransferRestrictions)7777": {
            "label": "enum IHypercertToken.TransferRestrictions",
            "members": [
              "AllowAll",
              "DisallowAll",
              "FromCreatorOnly"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_enum(TransferRestrictions)7777)": {
            "label": "mapping(uint256 => enum IHypercertToken.TransferRestrictions)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))": {
            "label": "mapping(uint256 => mapping(bytes32 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "18f4479dd70171f19657f8c092580a0d6e9ec28cf1867e45d3e9e87aff3e1ee2": {
      "address": "0xFf3F27c6132c30d1098b97FfeC05C3150dA90432",
      "txHash": "0xaf2c9d0708fafea03a10da1e6b25f340c4a2847b09032d2890d40167496c7b49",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "totalUnitsForSale",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:36"
          },
          {
            "label": "offers",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_struct(Offer)2510_storage)",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:37"
          },
          {
            "label": "_offerCounter",
            "offset": 0,
            "slot": "253",
            "type": "t_uint256",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "254",
            "type": "t_array(t_uint256)27_storage",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:387"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(AcceptedToken)2522_storage)dyn_storage": {
            "label": "struct IHypercertTrader.AcceptedToken[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)27_storage": {
            "label": "uint256[27]",
            "numberOfBytes": "864"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(OfferStatus)2517": {
            "label": "enum IHypercertTrader.OfferStatus",
            "members": [
              "Open",
              "Fulfilled",
              "Cancelled"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(OfferType)2513": {
            "label": "enum IHypercertTrader.OfferType",
            "members": [
              "Units",
              "Fraction"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Offer)2510_storage)": {
            "label": "mapping(uint256 => struct IHypercertTrader.Offer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AcceptedToken)2522_storage": {
            "label": "struct IHypercertTrader.AcceptedToken",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "minimumAmountPerUnit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Offer)2510_storage": {
            "label": "struct IHypercertTrader.Offer",
            "members": [
              {
                "label": "offerer",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "hypercertContract",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "fractionID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "unitsAvailable",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "minUnitsPerTrade",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "maxUnitsPerTrade",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "offerType",
                "type": "t_enum(OfferType)2513",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "status",
                "type": "t_enum(OfferStatus)2517",
                "offset": 1,
                "slot": "6"
              },
              {
                "label": "acceptedTokens",
                "type": "t_array(t_struct(AcceptedToken)2522_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c448a5dca6b776aedb55eb5857ea7c6a03d1ccd3ff709786879396d71bf7dbb2": {
      "address": "0x038c990018b9Aab4aA2496E592E668EAD77aF72B",
      "txHash": "0xe07f42a41b70affd1fdd08ce8011f55a35b0e62a9ef67d0b5c4daa04b6028f60",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "totalUnitsForSale",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:36"
          },
          {
            "label": "offers",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_struct(Offer)8003_storage)",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:37"
          },
          {
            "label": "_offerCounter",
            "offset": 0,
            "slot": "253",
            "type": "t_uint256",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "254",
            "type": "t_array(t_uint256)27_storage",
            "contract": "HypercertTrader",
            "src": "src/HypercertTrader.sol:392"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(AcceptedToken)8015_storage)dyn_storage": {
            "label": "struct IHypercertTrader.AcceptedToken[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)27_storage": {
            "label": "uint256[27]",
            "numberOfBytes": "864"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_enum(OfferStatus)8010": {
            "label": "enum IHypercertTrader.OfferStatus",
            "members": [
              "Open",
              "Fulfilled",
              "Cancelled"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(OfferType)8006": {
            "label": "enum IHypercertTrader.OfferType",
            "members": [
              "Units",
              "Fraction"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Offer)8003_storage)": {
            "label": "mapping(uint256 => struct IHypercertTrader.Offer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AcceptedToken)8015_storage": {
            "label": "struct IHypercertTrader.AcceptedToken",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "minimumAmountPerUnit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Offer)8003_storage": {
            "label": "struct IHypercertTrader.Offer",
            "members": [
              {
                "label": "offerer",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "hypercertContract",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "fractionID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "unitsAvailable",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "minUnitsPerTrade",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "maxUnitsPerTrade",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "offerType",
                "type": "t_enum(OfferType)8006",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "status",
                "type": "t_enum(OfferStatus)8010",
                "offset": 1,
                "slot": "6"
              },
              {
                "label": "acceptedTokens",
                "type": "t_array(t_struct(AcceptedToken)8015_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
